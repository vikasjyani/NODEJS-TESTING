openapi: 3.0.3
info:
  title: KSEB Energy Futures Platform API
  description: |-
    Comprehensive API for energy planning and analysis, including demand forecasting,
    load profile generation, and PyPSA power system optimization.

    The API supports asynchronous job processing for long-running tasks,
    with status updates and results retrieval through dedicated endpoints and WebSockets.
  version: 1.0.0
  contact:
    name: KSEB Energy Planning Team
    email: devteam@kseb.in
    url: https://www.kseb.in/ (Placeholder)
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  x-logo: # Custom extension for logo
    url: "https://www.kseb.in/images/kseb_logo.png" # Placeholder logo URL
    altText: "KSEB Logo"

servers:
  - url: http://localhost:5000/api
    description: Local Development Server
  - url: https://api.energyfutures.kseb.in/v1 # Example production URL
    description: Production Server (Illustrative)

tags:
  - name: Health & Status
    description: API health and operational status.
  - name: Demand Projection
    description: Endpoints for electricity demand forecasting.
  - name: Load Profile
    description: Endpoints for generating and managing load profiles.
  - name: PyPSA Optimization
    description: Endpoints for power system modeling and optimization with PyPSA.
  - name: File Management
    description: Endpoints for uploading and managing data files.
  - name: Project Management
    description: (Conceptual) Endpoints for managing planning projects.

components:
  securitySchemes:
    # BearerAuth: # Example for JWT if added later
    #   type: http
    #   scheme: bearer
    #   bearerFormat: JWT
    ApiKeyAuth: # Example API Key
      type: apiKey
      in: header
      name: X-API-KEY
      description: API Key for authenticated access (if implemented).

  schemas:
    # --- General Schemas ---
    ErrorResponse:
      type: object
      required: [success, message]
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "An error occurred."
        errors: # For validation errors
          type: array
          items:
            type: string
          example: ["Field 'scenario_name' is required."]
        details: # For more structured error info
          type: object
          additionalProperties: true

    SuccessResponse:
      type: object
      required: [success]
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation successful."
        data: # Generic data payload
          type: object
          additionalProperties: true

    JobStatusResponse:
      type: object
      properties:
        success: { type: boolean }
        jobId: { type: string }
        status: { type: string, enum: [queued, running, completed, failed, cancelled] }
        progress: { type: number, format: integer, minimum: 0, maximum: 100 }
        startTime: { type: string, format: 'date-time' }
        completedTime: { type: string, format: 'date-time', nullable: true }
        failedTime: { type: string, format: 'date-time', nullable: true }
        currentStep: { type: string, nullable: true, description: "Current processing step name." }
        statusDetails: { type: string, nullable: true, description: "Detailed message from the process." }
        result: { type: object, additionalProperties: true, nullable: true, description: "Final result of the job." }
        error: { type: string, nullable: true, description: "Error message if the job failed." }
        config: { type: object, additionalProperties: true, description: "Configuration used for the job."}


    # --- Demand Projection Schemas ---
    DemandSectorData:
      type: object
      properties:
        sector: { type: string }
        sample_data: { type: array, items: {type: object} }
        statistics: { type: object }
        data_quality: { type: object }

    DemandForecastConfig:
      type: object
      required: [scenario_name, target_year, sectors]
      properties:
        scenario_name: { type: string, example: "HighGrowth_2030" }
        target_year: { type: integer, example: 2030 }
        input_file: { type: string, nullable: true, description: "Path to custom input data file." }
        exclude_covid: { type: boolean, default: true }
        exclude_covid_years: {type: array, items: {type: integer}, example: [2020,2021], nullable: true}
        sectors:
          type: object
          description: "Configuration for each sector."
          additionalProperties: # Allows any sector name as key
            type: object
            required: [models]
            properties:
              models: { type: array, items: { type: string, enum: [SLR, MLR, WAM, TimeSeries] }, minItems: 1 }
              independent_variables: { type: array, items: { type: string }, nullable: true, description: "For MLR model."}
              wam_window: {type: integer, nullable: true, description: "For WAM model."}
        timeout: { type: integer, description: "Python script timeout in milliseconds.", nullable: true }

    DemandForecastJobStartResponse:
      type: object
      properties:
        success: { type: boolean }
        forecastId: { type: string }
        message: { type: string }

    CorrelationData:
        type: object
        properties:
            sector: {type: string}
            correlations: {type: array, items: {
                type: object,
                properties: {
                    variable: {type: string},
                    correlation: {type: number},
                    abs_correlation: {type: number},
                    strength: {type: string},
                    recommendation: {type: string}
                }
            }}
            recommended_variables: {type: array, items: {type: string}}


    # --- Load Profile Schemas ---
    LoadProfileConfig:
      type: object
      required: [method, start_year, end_year]
      properties:
        profile_name: { type: string, nullable: true, example: "Residential_Summer_Peak" }
        method: { type: string, enum: [base_scaling, stl_decomposition, custom_template_method, statistical_sampling] }
        start_year: { type: integer, example: 2024 }
        end_year: { type: integer, example: 2030 }
        base_year: { type: integer, nullable: true, description: "For base_scaling." }
        input_template_file: {type: string, nullable: true, description: "Path to custom template file."}
        demand_scenario: { type: string, nullable: true, description: "Name of demand forecast scenario for scaling." }
        growth_rate: { type: number, format: float, nullable: true, description: "If no demand_scenario." }
        historical_years: { type: array, items: { type: integer }, nullable: true, description: "For STL." }
        timeout: { type: integer, description: "Python script timeout in milliseconds.", nullable: true }
        # Add other method-specific config fields from Python script

    LoadProfileJobStartResponse:
      type: object
      properties:
        success: { type: boolean }
        profileJobId: { type: string }
        message: { type: string }

    SavedProfileSummary:
      type: object
      properties:
        profile_id: { type: string }
        method: { type: string }
        generation_time: { type: string, format: 'date-time' }
        years_generated: { type: array, items: { type: integer } }
        summary: { type: object, description: "Key statistics like peak, total energy, load factor." }

    LoadProfileDetail:
        allOf:
            - $ref: '#/components/schemas/SavedProfileSummary'
            - type: object
              properties:
                filePath: { type: string, description: "Server-side path to the profile data file."}
                config_used: { $ref: '#/components/schemas/LoadProfileConfig' }
                data: { type: object, description: "Detailed hourly data, keyed by year."} # Actual data structure can be complex


    # --- PyPSA Schemas ---
    PyPSAOptimizationConfig:
      type: object
      required: [scenario_name, base_year, investment_mode]
      properties:
        scenario_name: { type: string, example: "Kerala_RE_Max_2035" }
        base_year: { type: integer, example: 2025 }
        investment_mode: { type: string, enum: [single_year, multi_year, all_in_one] }
        input_file: { type: string, nullable: true, description: "Path to PyPSA network template or .nc file." }
        snapshot_selection: { type: string, enum: [all, critical_days], nullable: true }
        solver_options:
          type: object
          properties:
            solver: { type: string, enum: [cbc, glpk, gurobi, cplex, highs, scip], default: "cbc" }
            time_limit: { type: integer, description: "In seconds.", nullable: true }
            optimality_gap: { type: number, format: float, description: "e.g., 0.01 for 1%", nullable: true }
        timeout: { type: integer, description: "Python script timeout in milliseconds.", nullable: true }
        # Add other PyPSA specific config fields

    PyPSAJobStartResponse:
      type: object
      properties:
        success: { type: boolean }
        jobId: { type: string }
        message: { type: string }

    PyPSANetworkInfo:
      type: object
      properties:
        scenario_name: {type: string}
        network_path: {type: string, description: "Server-side path to .nc file"}
        file_size: {type: integer}
        created_time: {type: string, format: "date-time"}

    PyPSAExtractedResults:
        type: object
        description: "Results extracted from a PyPSA network file."
        # Define based on pypsa_runner.py's _extract_and_save_results output
        properties:
            objective_value: {type: number, nullable: true}
            generator_capacity_by_carrier_mw: {type: object}
            # ... other key results

    PyPSAAnalysisData: # Generic for various analysis types
        type: object
        description: "Data from a specific PyPSA network analysis."
        # Structure depends on analysis_type from pypsa_analysis.py
        # Example for dispatch:
        # properties:
        #   generation_by_carrier_mwh: {type: object}
        #   total_generation_mwh: {type: array, items: {type:object}}

    # --- File Management Schemas ---
    FileUploadResponse:
      type: object
      properties:
        success: { type: boolean }
        message: { type: string }
        filePath: { type: string, description: "Server-side path of the uploaded file." }
        fileName: { type: string }
        fileType: { type: string, description: "MIME type." }
        fileSize: { type: integer, description: "In bytes." }

# --- Paths (API Endpoints) ---
paths:
  /health:
    get:
      tags: [Health & Status]
      summary: Application Health Check
      description: Provides the current health status of the API and basic server information.
      responses:
        '200':
          description: System is healthy.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: "healthy" }
                  timestamp: { type: string, format: "date-time" }
                  uptime: { type: number, description: "Node.js process uptime in seconds." }
                  memory: { type: object, description: "Memory usage of the Node.js process." }
                  version: { type: string, description: "Node.js version." }
        '503':
          description: System is unhealthy or experiencing issues.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

  # --- Demand Projection Paths ---
  /demand/sectors/{sector}:
    get:
      tags: [Demand Projection]
      summary: Get Sector Historical Data
      description: Retrieves historical data, statistics, and data quality information for a specified energy sector.
      parameters:
        - name: sector
          in: path
          required: true
          description: The energy sector to retrieve data for.
          schema:
            type: string
            enum: [residential, commercial, industrial, agriculture, transport, total]
      responses:
        '200':
          description: Sector data retrieved successfully.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data: { $ref: '#/components/schemas/DemandSectorData' }
                      source: { type: string, enum: [cache, script]}
        '400':
          description: Invalid sector or request.
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }
        '404':
          description: Sector data not found.
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }

  /demand/forecast:
    post:
      tags: [Demand Projection]
      summary: Run Demand Forecast
      description: Initiates a new demand forecasting job with the provided configuration. This is an asynchronous operation.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/DemandForecastConfig' }
      responses:
        '202':
          description: Forecast job accepted and started successfully.
          content: { application/json: { schema: { $ref: '#/components/schemas/DemandForecastJobStartResponse' } } }
        '400':
          description: Invalid configuration.
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }

  /demand/forecast/{forecastId}/status:
    get:
      tags: [Demand Projection]
      summary: Get Forecast Job Status
      description: Retrieves the current status, progress, and results (if completed) of a specific forecast job.
      parameters:
        - name: forecastId
          in: path
          required: true
          description: The ID of the forecast job.
          schema: { type: string }
      responses:
        '200':
          description: Forecast job status retrieved.
          content: { application/json: { schema: { $ref: '#/components/schemas/JobStatusResponse' } } } # Assuming JobStatusResponse is generic
        '404':
          description: Forecast job not found.
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }

  /demand/correlation/{sector}:
    get:
      tags: [Demand Projection]
      summary: Get Sector Correlation Data
      description: Retrieves correlation data for variables within a specified sector, typically used for MLR model variable selection.
      parameters:
        - $ref: '#/paths/~1demand~1sectors~1{sector}/get/parameters/0' # Reuse sector parameter
      responses:
        '200':
          description: Correlation data retrieved successfully.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data: { $ref: '#/components/schemas/CorrelationData' }
                      source: { type: string, enum: [cache, script]}
        '400':
          description: Invalid sector.
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }

  /demand/forecast/{forecastId}/cancel:
    post:
      tags: [Demand Projection]
      summary: Cancel Forecast Job
      description: Attempts to cancel an ongoing demand forecast job.
      parameters:
        - $ref: '#/paths/~1demand~1forecast~1{forecastId}~1status/get/parameters/0' # Reuse forecastId
      responses:
        '200': { description: "Cancel request processed.", content: { application/json: { schema: { $ref: '#/components/schemas/SuccessResponse' } } } }
        '400': { description: "Job cannot be cancelled (e.g., already completed/failed).", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }
        '404': { description: "Job not found.", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }


  # --- Load Profile Paths ---
  /loadprofile/generate:
    post:
      tags: [Load Profile]
      summary: Generate Load Profile
      description: Initiates a new load profile generation job. This is an asynchronous operation.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoadProfileConfig' }
      responses:
        '202':
          description: Profile generation job accepted.
          content: { application/json: { schema: { $ref: '#/components/schemas/LoadProfileJobStartResponse' } } }
        '400':
          description: Invalid configuration.
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }

  /loadprofile/jobs/{profileJobId}/status:
    get:
      tags: [Load Profile]
      summary: Get Profile Generation Job Status
      parameters:
        - name: profileJobId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Job status retrieved.
          content: { application/json: { schema: { $ref: '#/components/schemas/JobStatusResponse' } } }
        '404': { $ref: '#/paths/~1demand~1forecast~1{forecastId}~1status/get/responses/404' }

  /loadprofile/profiles:
    get:
      tags: [Load Profile]
      summary: List Saved Load Profiles
      description: Retrieves a list of summaries for all saved/generated load profiles.
      responses:
        '200':
          description: List of profile summaries.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  profiles: { type: array, items: { $ref: '#/components/schemas/SavedProfileSummary' } }

  /loadprofile/profiles/{profileId}:
    get:
      tags: [Load Profile]
      summary: Get Detailed Load Profile Data
      description: Retrieves the full data for a specific generated load profile.
      parameters:
        - name: profileId
          in: path
          required: true
          description: The ID of the load profile (generated by Python script).
          schema: { type: string }
      responses:
        '200':
          description: Detailed profile data.
          content:
            application/json:
              schema:
                type: object
                properties:
                    success: {type: boolean}
                    profile: {$ref: '#/components/schemas/LoadProfileDetail'}
        '404': { $ref: '#/paths/~1demand~1forecast~1{forecastId}~1status/get/responses/404' } # Reusing 404
    delete:
      tags: [Load Profile]
      summary: Delete Load Profile
      description: Deletes a specific saved load profile and its associated data file.
      parameters:
        - $ref: '#/paths/~1loadprofile~1profiles~1{profileId}/get/parameters/0'
      responses:
        '200': { description: "Profile deleted successfully.", content: { application/json: { schema: { $ref: '#/components/schemas/SuccessResponse' } } } }
        '404': { $ref: '#/paths/~1demand~1forecast~1{forecastId}~1status/get/responses/404' }


  /loadprofile/analyze/{profileId}:
    get:
      tags: [Load Profile]
      summary: Analyze Load Profile
      description: Performs a specified analysis on a load profile.
      parameters:
        - $ref: '#/paths/~1loadprofile~1profiles~1{profileId}/get/parameters/0'
        - name: analysisType
          in: query
          required: false
          description: "Type of analysis to perform (e.g., 'overview', 'seasonal'). Defaults to 'overview'."
          schema: { type: string, default: "overview" }
      responses:
        '200':
          description: Analysis results.
          content: { application/json: { schema: { $ref: '#/components/schemas/SuccessResponse' } } } # Data structure varies
        '404': { $ref: '#/paths/~1demand~1forecast~1{forecastId}~1status/get/responses/404' }

  /loadprofile/compare:
    post:
      tags: [Load Profile]
      summary: Compare Load Profiles
      description: Compares two or more load profiles based on selected metrics.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [profileIds]
              properties:
                profileIds: { type: array, items: { type: string }, minItems: 2, description: "Array of Python-generated profile_ids to compare."}
      responses:
        '200':
          description: Comparison results.
          content: { application/json: { schema: { $ref: '#/components/schemas/SuccessResponse' } } } # Data structure varies
        '400': { description: "Invalid request (e.g., less than 2 profileIds).", content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } } }


  # --- PyPSA Optimization Paths ---
  /pypsa/optimize:
    post:
      tags: [PyPSA Optimization]
      summary: Run PyPSA Optimization
      description: Initiates a new PyPSA power system optimization job. This is an asynchronous operation.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PyPSAOptimizationConfig' }
      responses:
        '202':
          description: PyPSA optimization job accepted.
          content: { application/json: { schema: { $ref: '#/components/schemas/PyPSAJobStartResponse' } } }
        '400':
          description: Invalid configuration.
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }

  /pypsa/optimization/{jobId}/status:
    get:
      tags: [PyPSA Optimization]
      summary: Get PyPSA Optimization Job Status
      parameters:
        - name: jobId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Job status retrieved.
          content: { application/json: { schema: { $ref: '#/components/schemas/JobStatusResponse' } } }
        '404': { $ref: '#/paths/~1demand~1forecast~1{forecastId}~1status/get/responses/404' }

  /pypsa/optimization/{jobId}/cancel:
    post:
      tags: [PyPSA Optimization]
      summary: Cancel PyPSA Optimization Job
      parameters:
        - $ref: '#/paths/~1pypsa~1optimization~1{jobId}~1status/get/parameters/0'
      responses:
        '200': { description: "Cancel request processed.", content: { application/json: { schema: { $ref: '#/components/schemas/SuccessResponse' } } } }
        '400': { $ref: '#/paths/~1demand~1forecast~1{forecastId}~1cancel/post/responses/400' }
        '404': { $ref: '#/paths/~1demand~1forecast~1{forecastId}~1cancel/post/responses/404' }


  /pypsa/networks:
    get:
      tags: [PyPSA Optimization]
      summary: List Available PyPSA Networks
      description: Retrieves a list of completed and saved PyPSA network scenarios.
      parameters:
        - name: refresh
          in: query
          required: false
          schema: {type: boolean}
          description: "Force a rescan of the results directory."
      responses:
        '200':
          description: List of available networks.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  networks: { type: array, items: { $ref: '#/components/schemas/PyPSANetworkInfo' } }

  /pypsa/extract-results:
    post:
      tags: [PyPSA Optimization]
      summary: Extract Results from PyPSA Network
      description: Loads a saved PyPSA network (.nc file) and extracts key results and summaries.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - required: [networkPath]
                  properties:
                    networkPath: { type: string, description: "Full server-side path to the .nc network file." }
                - required: [scenarioName]
                  properties:
                    scenarioName: { type: string, description: "Name of a previously run scenario." }
      responses:
        '200':
          description: Results extracted successfully.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      results: { $ref: '#/components/schemas/PyPSAExtractedResults' }
                      source: {type: string, enum: [cache, script]}
        '400': { $ref: '#/paths/~1loadprofile~1compare/post/responses/400' }
        '404': { $ref: '#/paths/~1demand~1forecast~1{forecastId}~1status/get/responses/404' } # Network not found

  # Generic Analysis Endpoint Structure for PyPSA
  # Example: /pypsa/analysis/{networkPathEncoded}/dispatch
  # This structure is repeated for capacity, storage, emissions, info.
  /pypsa/analysis/{networkPathEncoded}/{analysisType}:
    get:
      tags: [PyPSA Optimization]
      summary: Get PyPSA Network Analysis Data
      description: Retrieves specific analysis data from a solved PyPSA network. The `networkPathEncoded` must be URL-encoded.
      parameters:
        - name: networkPathEncoded
          in: path
          required: true
          description: "URL-encoded path to the .nc network file OR a scenario name that resolves to a path."
          schema: { type: string }
        - name: analysisType
          in: path
          required: true
          description: "Type of analysis to perform."
          schema: { type: string, enum: [dispatch, capacity, storage, emissions, info] }
        - name: startDate
          in: query
          required: false
          description: "For time-series data like dispatch/storage (YYYY-MM-DD)."
          schema: { type: string, format: "date" }
        - name: endDate
          in: query
          required: false
          description: "For time-series data like dispatch/storage (YYYY-MM-DD)."
          schema: { type: string, format: "date" }
        - name: resolution
          in: query
          required: false
          description: "Time resolution for dispatch/storage (e.g., H, D, M)."
          schema: { type: string, default: "H" }
      responses:
        '200':
          description: Analysis data retrieved.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data: { $ref: '#/components/schemas/PyPSAAnalysisData' }
        '400': { $ref: '#/paths/~1loadprofile~1compare/post/responses/400' }
        '404': { $ref: '#/paths/~1demand~1forecast~1{forecastId}~1status/get/responses/404' }


  /pypsa/compare-networks:
    post:
      tags: [PyPSA Optimization]
      summary: Compare PyPSA Networks
      description: Compares results from multiple PyPSA network scenarios.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [networkPaths]
              properties:
                networkPaths: { type: array, items: { type: string }, minItems: 2, description: "Array of network scenario names or server-side paths to .nc files."}
                metrics: { type: array, items: { type: string }, nullable: true, description: "Specific metrics to compare (e.g., ['cost', 'emissions']). Defaults to common set."}
      responses:
        '200':
          description: Comparison results.
          content: { application/json: { schema: { $ref: '#/components/schemas/SuccessResponse' } } } # Data structure varies
        '400': { $ref: '#/paths/~1loadprofile~1compare/post/responses/400' }


  # --- File Management Paths (Example) ---
  /files/upload:
    post:
      tags: [File Management]
      summary: Upload File
      description: Uploads a file to the server for use in various modules (e.g., input templates, data).
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file: # Name of the form field for the file
                  type: string
                  format: binary
                type: # Optional: to categorize the file
                  type: string
                  description: "Type of file being uploaded (e.g., 'demand_input_template', 'pypsa_network_data')."
                  example: "demand_input_template"
      responses:
        '200':
          description: File uploaded successfully.
          content: { application/json: { schema: { $ref: '#/components/schemas/FileUploadResponse' } } }
        '400':
          description: Invalid file or upload error.
          content: { application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } } }
```
