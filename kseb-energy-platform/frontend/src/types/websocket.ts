// General structure for progress updates from backend Python scripts
export interface PythonProgressData {
    progress: number; // Percentage (0-100)
    status: string;   // Current status message or step name from Python
    details?: string; // Optional more detailed message
    // Specific data per module might be included here
    sector?: string; // For demand forecast
    step?: string;   // For load profile or PyPSA (can overlap with status)
}

// Specific event data types (can be expanded)

// Demand Forecast Events
export interface ForecastProgressEvent extends PythonProgressData {
    forecastId: string;
    sector: string; // Sector currently being processed
}
export interface ForecastCompletedEvent {
    forecastId: string;
    result: any; // Define more specifically based on Python output
}
export interface ForecastErrorEvent {
    forecastId: string;
    error: string;
}
export interface ForecastCancelledEvent {
    forecastId: string;
}

// Load Profile Events
export interface ProfileProgressEvent extends PythonProgressData {
    profileJobId: string; // The Node.js job ID
    pythonProfileId?: string; // The ID generated by the Python script
    step: string; // Current generation step
}
export interface ProfileGeneratedEvent {
    profileJobId: string;
    result: any; // Contains pythonProfileId, saved_path, statistics, etc.
}
export interface ProfileErrorEvent {
    profileJobId: string;
    error: string;
}
export interface ProfileCancelledEvent {
    profileJobId: string;
}


// PyPSA Optimization Events
export interface PyPSAProgressEvent extends PythonProgressData {
    jobId: string; // The Node.js job ID
    pythonJobId?: string; // The ID from Python script if any
    step: string; // Current optimization step (e.g., "Solving", "Processing Results")
}
export interface PyPSACompletedEvent {
    jobId: string;
    result: any; // Contains network_path, summary, objective_value, etc.
}
export interface PyPSAErrorEvent {
    jobId: string;
    error: string;
}
export interface PyPSACancelledEvent {
    jobId: string;
}


// General server notification (could be used for global alerts)
export interface ServerNotificationEvent {
    type: 'info' | 'warning' | 'error' | 'success';
    message: string;
    details?: string;
}


// Type for events the client might emit (examples)
export interface ClientEmitEvent_JoinRoom {
    roomId: string;
}
export interface ClientEmitEvent_LeaveRoom {
    roomId: string;
}
export interface ClientEmitEvent_CustomUserAction {
    action: string;
    payload: any;
}


// Mapping of server-to-client event names to their data types
// This helps with type safety when handling socket.on events
export interface ServerToClientEvents {
    connect: () => void;
    disconnect: (reason: string) => void;
    connect_error: (error: Error) => void;

    'forecast-progress': (data: ForecastProgressEvent) => void;
    'forecast-completed': (data: ForecastCompletedEvent) => void;
    'forecast-error': (data: ForecastErrorEvent) => void;
    'forecast-cancelled': (data: ForecastCancelledEvent) => void;
    'forecast-status': (data: any) => void; // General status, can be one of the above or simpler status

    'profile-progress': (data: ProfileProgressEvent) => void;
    'profile-generated': (data: ProfileGeneratedEvent) => void;
    'profile-error': (data: ProfileErrorEvent) => void;
    'profile-cancelled': (data: ProfileCancelledEvent) => void;
    'profile-generation-status': (data: any) => void;

    'pypsa-progress': (data: PyPSAProgressEvent) => void;
    'pypsa-completed': (data: PyPSACompletedEvent) => void;
    'pypsa-error': (data: PyPSAErrorEvent) => void;
    'pypsa-cancelled': (data: PyPSACancelledEvent) => void;
    'pypsa-job-status': (data: any) => void;

    'server-notification': (data: ServerNotificationEvent) => void;
    // Add other specific events from server to client
}

// Mapping of client-to-server event names to their data types
// This helps with type safety for socket.emit
export interface ClientToServerEvents {
    'join-room': (roomId: string) => void;
    'leave-room': (roomId: string) => void;
    'custom-event': (data: { message: string }) => void; // Example from app.js
    // Add other specific events from client to server
}
