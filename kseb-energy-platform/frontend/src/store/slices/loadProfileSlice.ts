import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../index';

interface ProfileGenerationJob {
  id: string; // profileJobId from backend controller
  status: 'queued' | 'running' | 'completed' | 'failed' | 'cancelled';
  progress: number; // 0-100
  currentStep?: string; // Current step in generation (e.g., "Data Loading", "Scaling")
  statusDetails?: string; // More detailed status from Python
  startTime: string; // ISO string
  completedTime?: string; // ISO string
  failedTime?: string; // ISO string
  config: any; // Configuration used
  result?: any; // Final result (e.g., { profile_id (from python), saved_path, statistics })
  error?: string;
}

// Could also store list of saved profiles metadata if not solely relying on RTK Query
interface SavedProfileMeta {
    profile_id: string; // ID generated by Python
    method: string;
    generation_time: string;
    years_generated: number[];
    summary?: any; // Key statistics
    filePath?: string; // Path to the detailed data file
}

interface LoadProfileState {
  generationJobs: Record<string, ProfileGenerationJob>; // Keyed by profileJobId
  // savedProfilesList: SavedProfileMeta[]; // Alternative to RTK Query for listing
}

const initialState: LoadProfileState = {
  generationJobs: {},
  // savedProfilesList: [],
};

const loadProfileSlice = createSlice({
  name: 'loadProfile',
  initialState,
  reducers: {
    profileJobStarted: (state, action: PayloadAction<{ profileJobId: string; config: any }>) => {
      const { profileJobId, config } = action.payload;
      state.generationJobs[profileJobId] = {
        id: profileJobId,
        config,
        status: 'queued',
        progress: 0,
        startTime: new Date().toISOString(),
      };
    },
    updateProfileProgress: (
      state,
      action: PayloadAction<{
        profileJobId: string; // This is the job ID from Node.js controller
        pythonProfileId?: string; // This is the ID from Python script, if available early
        progress: number;
        step?: string;
        status?: string; // Detailed status from Python
      }>
    ) => {
      const { profileJobId, progress, step, status } = action.payload;
      if (state.generationJobs[profileJobId]) {
        state.generationJobs[profileJobId].progress = progress;
        if (step) state.generationJobs[profileJobId].currentStep = step;
        if (status) state.generationJobs[profileJobId].statusDetails = status;
         if (state.generationJobs[profileJobId].status === 'queued' && progress > 0) {
             state.generationJobs[profileJobId].status = 'running';
        }
      }
    },
    setProfileCompleted: (
      state,
      action: PayloadAction<{ profileJobId: string; result: any }> // result is from Python
    ) => {
      const { profileJobId, result } = action.payload;
      if (state.generationJobs[profileJobId]) {
        state.generationJobs[profileJobId].status = 'completed';
        state.generationJobs[profileJobId].progress = 100;
        state.generationJobs[profileJobId].result = result; // Python result containing profile_id, path, etc.
        state.generationJobs[profileJobId].completedTime = new Date().toISOString();
      }
    },
    setProfileError: (
      state,
      action: PayloadAction<{ profileJobId: string; error: string }>
    ) => {
      const { profileJobId, error } = action.payload;
      if (state.generationJobs[profileJobId]) {
        state.generationJobs[profileJobId].status = 'failed';
        state.generationJobs[profileJobId].error = error;
        state.generationJobs[profileJobId].failedTime = new Date().toISOString();
      }
    },
    setProfileCancelled: (state, action: PayloadAction<{ profileJobId: string }>) => {
        const { profileJobId } = action.payload;
        if (state.generationJobs[profileJobId]) {
            state.generationJobs[profileJobId].status = 'cancelled';
        }
    },
    clearProfileJob: (state, action: PayloadAction<string>) => {
        delete state.generationJobs[action.payload];
    },
    clearAllProfileJobs: (state) => {
        state.generationJobs = {};
    }
    // Potentially add reducers for managing savedProfilesList if not using RTK Query for it
  },
});

export const {
  profileJobStarted,
  updateProfileProgress,
  setProfileCompleted,
  setProfileError,
  setProfileCancelled,
  clearProfileJob,
  clearAllProfileJobs,
} = loadProfileSlice.actions;

// Selectors
export const selectAllProfileGenerationJobs = (state: RootState) => state.loadProfile.generationJobs;
export const selectProfileGenerationJobById = (state: RootState, profileJobId: string) => state.loadProfile.generationJobs[profileJobId];

export default loadProfileSlice.reducer;
